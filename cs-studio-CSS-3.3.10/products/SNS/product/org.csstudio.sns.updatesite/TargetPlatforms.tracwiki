= Target Platforms =

== 64 Bit ==
Recent Linux and Windows users tend to have 64-bit-only versions of Java, so they need
the 64 bit products.

Oracle Java 7 for Mac OS X is 64 bit.

== Mac OS X ==
Started out with {{{os=macosx, ws=carbon, arch=x86}}} for Mac OS X 10.5 and 10.6.

Then switched to {{{ws=cocoa}}}.

Eventually, CSS source code updates required Java 7.
The Eclipse 3.7.2 target launcher, however, does not work with Oracle Java 7.
Options {{{-vm /path/to/jdk1.7/bin/java}}} have no effect.
The launch will fail and configuration/*.log will show that Java 6 is used, whatever you try to use Java 7:
{{{
java.version=1.6.0_45
java.vendor=Apple Inc.
}}}

Need to start CSS like this:
{{{
java -showversion -XX:MaxPermSize=256m -Xms1024m -Xmx1024m -XstartOnFirstThread -Dorg.eclipse.swt.internal.carbon.smallFonts -Xdock:icon=css.app/Contents/Resources/css.icns -Dosgi.requiredJavaVersion=1.7 -jar plugins/org.eclipse.equinox.launcher_1.2.0.v20110502.jar
}}}

See also http://stackoverflow.com/questions/10352715/how-do-i-run-eclipse-using-oracles-new-1-7-jdk-for-the-mac

One workaround is to patch the generated product with the launcher binary from Eclipse 4.3:
{{{
cp ECLIPSE4/org.eclipse.equinox.launcher.cocoa.macosx.x86_64_1.1.200.v20130327-1440/eclipse_1507.so CSS/plugins/org.eclipse.equinox.launcher.cocoa.macosx.x86_64_1.1.101.v20120109-1504/eclipse_1408.so 
}}}

A really terrible hack is to replace the `org.eclipse.equinox.launcher.cocoa.macosx.x86_64_1.1.101.v20120109-1504/eclipse_1408.so` of the 3.7.2 target platform and delta pack with the `eclipse_1507.so` from Eclipse 4.3.
This will allow a headless build of binaries that run on Mac OS X 10.8 with Java 7.
When doing this, note that the signage info also needs to be removed (`META-INF/ECLIPSEF.*`, `SHA1-Digest: ` entries in `MANIFEST.MF`).


Before Eclipse 4.3, support for the new Oracle/Open JDK layout also requires manual creation of (empty) Classes directory:
{{{
sudo mkdir /Library/Java/JavaVirtualMachines/jdk1.7.0_17.jdk/Contents/Home/Classes
}}}



== Update from P2 Repository ==
When supporting self-updates from a P2 repository, assert that products will not attempt to update
from for example {{{os=macosx, ws=carbon}}} to {{{ws=cocoa}}},
or from {{{os=macosx, arch=x86}}} to {{{arch=x86_64}}}
The result would be:

 1. Update, running on {{{ws=carbon}}}, removes/disables the old carbon artefacts.
 2. Update then refuses to install the new {{{ws=cocoa}}} artefacts, because it's running as {{{ws=carbon}}}, so the update does not apply.
 3. Result is a defunct setup.


To guard against this, add specific filters to the product plugin, for example 
{{{ (| (osgi.ws=win32) (& (osgi.ws=cocoa)(osgi.arch=x86_64)) (osgi.ws=gtk)) }}}

which prevent installation of this 'latest' product into an existing {{{ws=carbon}}} setup
or a `cocoa` setup on 32 bit.

Users will have to download the new product ZIP file, they cannot use self-update.
